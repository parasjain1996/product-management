import com.fasterxml.jackson.annotation.JsonProperty;
import org.bson.Document;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class SchemaGenerator {

    public static void main(String[] args) {
        // Generate schema for the User class
        Document userSchema = generateMongoSchema(User.class);
        System.out.println("Generated MongoDB Schema: ");
        System.out.println(userSchema.toJson());
    }

    /**
     * Generates MongoDB-like schema from a Java class using reflection
     *
     * @param clazz the class to analyze
     * @return a MongoDB schema as Document
     */
    public static Document generateMongoSchema(Class<?> clazz) {
        Document schemaDoc = new Document();

        Field[] fields = clazz.getDeclaredFields(); // Get all fields from the class

        for (Field field : fields) {
            field.setAccessible(true);

            String fieldName = getFieldName(field);
            Class<?> fieldType = field.getType();

            // Check if the field is a primitive type or a standard object (like String)
            if (isPrimitiveOrWrapper(fieldType) || fieldType == String.class) {
                schemaDoc.append(fieldName, getMongoType(fieldType));
            } 
            // Check if the field is a List (array)
            else if (List.class.isAssignableFrom(fieldType)) {
                // For lists, we assume it holds a single type, so we need the generic type
                schemaDoc.append(fieldName, new ArrayList<>());
            } 
            // Check if it's an inner/nested object (user-defined class)
            else if (!fieldType.isPrimitive()) {
                schemaDoc.append(fieldName, generateMongoSchema(fieldType));
            }
        }
        return schemaDoc;
    }

    /**
     * Get the name of the field, checking for @JsonProperty annotation.
     *
     * @param field the field to inspect
     * @return the name of the field
     */
    private static String getFieldName(Field field) {
        if (field.isAnnotationPresent(JsonProperty.class)) {
            JsonProperty jsonProperty = field.getAnnotation(JsonProperty.class);
            return jsonProperty.value();
        }
        return field.getName();
    }

    /**
     * Returns MongoDB field types based on Java types.
     *
     * @param clazz the Java class
     * @return MongoDB equivalent type
     */
    private static String getMongoType(Class<?> clazz) {
        if (clazz == String.class) {
            return "string";
        } else if (clazz == int.class || clazz == Integer.class) {
            return "int";
        } else if (clazz == long.class || clazz == Long.class) {
            return "long";
        } else if (clazz == double.class || clazz == Double.class) {
            return "double";
        } else if (clazz == boolean.class || clazz == Boolean.class) {
            return "boolean";
        } else if (clazz == Date.class) {  // Handling Date type
            return "date";
        } else if (clazz == java.time.LocalDate.class || clazz == java.time.LocalDateTime.class) { // Java 8+ date/time
            return "date";
        } else {
            return "object";
        }
    }

    /**
     * Checks if a class is a primitive or its wrapper type.
     *
     * @param clazz the class to check
     * @return true if primitive or wrapper, false otherwise
     */
    private static boolean isPrimitiveOrWrapper(Class<?> clazz) {
        return clazz.isPrimitive() || clazz == Integer.class || clazz == Long.class || clazz == Double.class ||
               clazz == Boolean.class || clazz == Character.class || clazz == Byte.class || clazz == Short.class ||
               clazz == Float.class;
    }
}
